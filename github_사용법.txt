[github 사용법]


====설정===

* Git을 사용하려면 다운받아야함. 구글링하면 바로 나오는 공식페이지.
https://git-scm.com/
(윈도우용 git bash, mac은 그냥 하면 됨, 기타 IDE의 터미널에서 가능)

local repository : 내 컴 과 연동.
remote repository : github 주소. 원격저장소.

===시작====

​$ cd local repository
$ git init : 이제 시작이다. git을 만들어줌
4. git remote add origin https://github.com/imshallah/glade.git(깃허브 레퍼지토리 주소)(레퍼지토리를 하나 생성하고 주소 복사해서 붙여넣기 하면 됨)
$ git branch -M master/main

=============
5. git push -u origin master/main (브런치 이름, 굳이 master가 아닌 브런치일 때는 이름을 바꿔줘야 함)
- 여기서 git 이 안올라가고 오류가 난다 싶으면, 4번과 5번 사이에
git pull origin master --allow-unrelated-histories 해줘야함.
=============

$ git --version

github 저장소에 파일을 추가하려면 내가 누구인지 알려줘야 한다. 아니면 에러뜨면서 시스템이 너 누구야?하고 물어본다. 
그걸 알려주는 코드가 이거.
git config --global user.email "nomado@nate.com"
git config --global user.name "imshallah"

=========깃허브에 파일 등록하기========

$ git add {파일 이름} : stage 에 파일 등록(스테이징)
$ git add ./-A : 폴더의 모든 파일 추가
$ git status : staged 파일 목록 확인
$ git --reset : add 한 파일 취소

$ git commit -m "frist commit" : commit 등록 (stage에 있는 파일이 local repository에 저장됨). 최대한 영어로 하는 것이 버그가 안난다.

$ git push origin master : github 에 파일, 커밋 추가. 커밋한 파일이 git hub(remote repository)에 실제로 등록.

$ git log : commit 시킨 기록(시간과 아까 기록한 내용)을 확인할 수 있다.

* 계속 rejected 에러가 걸릴 때는,
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'https://github.com/~~'
push 할 때
git push -f origin master
를 써주면 되긴 됨

*​기존 레퍼지토리를 지우는 법
git remote remove origin
(이렇게 지우고 다시 remote add origin "새 레퍼지토리 주소" 하면 새로 들어감)

=======깃허브에서 파일 가져오기========

$ git fetch : github 에서 local repository 로 가져오기
$ git merge : github 와 local repository 완전히 동일시
$ git pull : fetch+merge  동시에 사용. 남이 작성한 코드를 업데이트해서 가져오기.

$ git push : 기록된 코드를 네트워크에 있는 서버에 올리기

fork : 프로젝트의 변경 권한이 없을 때 내 계정으로 프로젝트 복사본을 만들어 변경하는 것.
star : 즐겨찾기 기능. 마음에 드는 소스코드 저장소를 나중에 확인.


====git clone===

(git clone 하는 법 : 불러오고싶은 코드 불러오는 법)
1. 일단 바탕화면이나 아무 곳에 폴더 하나를 만듬
2. 그 폴더에 우클릭해서 git bash 들어가기 (mac이라면 터미널에서 폴더 경로 찾아서 들어가게하기 cd 사용해서 폴더이름 쓰면 됨)
3. git bash 혹은 터미널이 뜨면 git clone 내가 클론하고싶은 깃허브 레퍼지토리 주소 작성
4. 끝

===GitHub Pages _ 깃허브로 호스팅하기====

내가 만든 웹페이지를 호스팅해주는 여러 업체들이 있다.
무료로 호스팅해주는 업체들도 여러 곳 있지만,
Github를 사용하고 있다면 굳이 다른 곳들을 이용할 필요가 없다.
깃허브에도 호스팅 기능이 있기 때문!

호스팅이란 웹페이지를 올릴 인터넷 상의 공간(서버)를 임대해주는 것을 말한다.


깃허브 레파지토리에서 Settings를 누른다.
Settings에서 스크롤을 내리면 GitHub Pages라는 곳이 있다.
아직 활성화시키지 않았다면 아마 아래 화면과 같은 모습일 것이다.
여기서 None을 클릭해 branch를 master로 선택해준다.
만약 여러 브런치들을 사용해 개발중이라면, 원하는 브런치를 선택해주면 된다.

선택한 이후의 모습.
초록박스 안의 주소로 들어갈 수 있다.
내가 만든 웹페이지를 다른 사람들에게 보여주고 싶다면, 저 주소를 알려주면 된다.
GitHub Pages의 주소는 이런 형태로 이루어져있다.
https://{github ID}.github.io/{레파지토리 이름}/
https://imshallah/github.io/glade

레파지토리에서 오른쪽을 확인해보면 github-pages가 활성화되어 있는 것을 볼 수 있다.
여기를 눌러서도 들어갈 수 있고, 
아까 전에 published되었다고 알려준 주소로도 바로 들어갈 수 있다. :)
여기를 눌러서 들어간다면,
pages를 사용한 이후의 변화과정 또한 확인할 수 있다.
(커밋할때마다 업데이트된다.)

하지만 리액트를 사용해 만들었다면?
다른 라이브러리를 깔아줘야한다.
아니면 Readme파일이 화면에 뜬다.
(리드미 파일을 마주대할 때의 당황스러움이란...)
git-pages 를 사용하자.

터미널에   
npm install gh-pages --save-dav  입력
install대신 약어인 i를 입력해도된다. 
package.json에 들어가서 다음 세가지를 적어준다.

scripts 안에
"predeploy": "npm run build",
"deploy": "gh-pages -d build"
제일 마지막에
"homepage": "https://{github ID}.github.io/{레파지토리이름}/

홈페이지 주소는 아까 github pages에서 자동으로 만들어주는 그 주소이다.
세팅 설정을 하고나서 깔아도 되고, 세팅설정 바로 주소를 적어줘도 된다.

predeploy는 deploy가 실행되기 전에 자동으로 실행된다.

터미널에
npm run deploy
입력!
그럼 자동으로 git-pages가 활성화된다.

만약 이렇게 했는데도 reame 파일이 뜬다면, Branch를 gh-pages로 바꿔주자.

github pages의 장점이라면
코드 변경이 있을 때마다 따로 관리해주지 않아도 된다는 점.
공부하는 입장으로서,
커밋으로 한번에 해결되니 다른 웹포스팅 업체를 이용할 때보다 편하다.

/////내 주소/////

https://github.com/imshallah

https://github.com/imshallah/glade

