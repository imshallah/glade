[github 사용법]


====설정===

* Git을 사용하려면 다운받아야함. 구글링하면 바로 나오는 공식페이지.
https://git-scm.com/
다운받거나 바로 실행해서 설치하면 설치 화면 순서대로.

(윈도우용 git bash, mac은 그냥 하면 됨, 기타 IDE의 터미널에서 가능)

local repository : 내 컴 과 연동.(D:\github)
remote repository : github 주소. 원격저장소.

===시작====

​$ cd local repository (D:\github)
$ git init : 이제 시작이다. git을 만들어줌
4. git remote add origin https://github.com/imshallah/glade.git(깃허브 레퍼지토리 주소)(레퍼지토리를 하나 생성하고 주소 복사해서 붙여넣기 하면 됨)
$ git branch -M master/main

=============
5. git push -u origin master/main (브런치 이름, 굳이 master가 아닌 브런치일 때는 이름을 바꿔줘야 함)
- 여기서 git 이 안올라가고 오류가 난다 싶으면, 4번과 5번 사이에
git pull origin master --allow-unrelated-histories 해줘야함.

git 에서 https repository 연결시 SSL 인증서 오류 해결법
신뢰할 수 있는 사이트라면 아래 명령어로 SSL 인증서 검증을 끄는 게 가장 간편

git config --global http.sslVerify false

=============

$ git --version

github 저장소에 파일을 추가하려면 내가 누구인지 알려줘야 한다. 아니면 에러뜨면서 시스템이 너 누구야?하고 물어본다. 
그걸 알려주는 코드가 이거.
git config --global user.email "nomado@nate.com"
git config --global user.name "imshallah"

=========깃허브에 파일 등록하기========

$ git status : staged 파일 목록 확인
$ git add ./-A : 폴더의 모든 파일 추가
$ git add {파일 이름} : stage 에 파일 등록(스테이징) 굳이 개별 파일 지정하지 말고 전체로 하면 변경된 사항 status 로 먼저 확인하고 add . 후 다시 status 로 확인하고 commit & push
$ git status : staged 파일 목록 확인
$ git --reset : add 한 파일 취소

$ git commit -m "frist commit" : commit 등록 (stage에 있는 파일이 local repository에 저장됨). 최대한 영어로 하는 것이 버그가 안난다.

$ git push origin master : github 에 파일, 커밋 추가. 커밋한 파일이 git hub(remote repository)에 실제로 등록.

$ git log : commit 시킨 기록(시간과 아까 기록한 내용)을 확인할 수 있다.

* 계속 rejected 에러가 걸릴 때는,
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'https://github.com/~~'
push 할 때
git push -f origin master
를 써주면 되긴 됨

*​기존 레퍼지토리를 지우는 법
git remote remove origin
(이렇게 지우고 다시 remote add origin "새 레퍼지토리 주소" 하면 새로 들어감)

=======깃허브에서 파일 가져오기========

$ git fetch : github 에서 local repository 로 가져오기. github 원격 저장소에 변경된 내용을 내 로컬 저장소로 다운로드하는 것.
$ git merge : github 와 local repository 완전히 동일시
$ git pull : fetch+merge  동시에 사용. 남이 작성한 코드를 업데이트해서 가져오기. 자동으로 원격 저장소의 파일을 내려받고 이상이 없는 경우 merge까지 자동으로 합니다.

fork : 프로젝트의 변경 권한이 없을 때 내 계정으로 프로젝트 복사본을 만들어 변경하는 것.
star : 즐겨찾기 기능. 마음에 드는 소스코드 저장소를 나중에 확인.

=== eclipse : 깃허브에서 파일 가져오기========
https://blog.naver.com/heaves1/221623318893

project - team - share project

window - show view - other 
- git staging : 추가된 뷰를 드래그하여 [Server] 뷰의 옆에 추가합니다.
프로젝트 폴더를 클릭하고 기다리면 [Unstaged Changes]목록에 추가되어 아직 스테이지영역에도 넘어가지 못한 것을 확인할 수 있습니다.

작업 공간 -> 스테이지 영역 -> 로컬 저장소 -> 원격 저장소

* commit
은 내 로컬저장소에 작업한 파일을 저장하는 작업을 의미합니다.
우선 Untracked 상태인 파일들을 stage 영역으로 보내야 합니다. 그래야 commit을 하여 원격 저장소로 보낼 수 있습니다. Unstaged Change 영역에 있는 모든 파일을 선택하고 오른쪽 버튼을 눌러 [Add to Git Index]를 선택합니다.

모든 파일이 stage 영역으로 넘어가고 프로젝트의 아이콘은 staged 상태가 된 것을 확인할 수 있습니다. stage 영역에 있는 아이콘은 added 상태로 이제 아직 git으로 올라가지는 않았지만 commit 할 수 있는 상태라는 의미입니다.

stage 영역에 있는 파일을 로컬 영역으로 commit 시키기 위해 commit messge를 입력하고 commit 버튼을 누릅니다. stage 영역에 있는 파일이 없어지고 아이콘은 모두 변경됩니다.

* remote 설정
- git repositories 추가
추가된 뷰를 [Git Staging] 뷰 옆에 보이도록 드래그해서 조절합니다. 이 뷰는 로컬 저장소에 저장된 프로젝트를 github의 원격 저장소에 저장하는 작업을 편하게 할 수 있도록 지원되는 뷰입니다.

로컬 저장소가 보이며 이 저장소의 확장 버튼을 눌러 다음과 같이 구조가 보이도록 설정합니다. 서브메뉴 항목 중 [Remote]를 선택하고 마우스 오른쪽 버튼을 눌러 [Create Remote..]를 선택합니다.

[New Remote] 대화상자가 나타나면 remote name은 기본 “origin”으로 주고 [ok] 버튼을 누릅니다.

다음과 같은 대화상자가 나타나면 [change] 버튼을 누릅니다. Github와 연결할 것이므로 연결할 github의 repository로 이동한 후 [Clone or download] 버튼을 누르고 copy 합니다.

다음과 같이 user와 password 설정하고 [finish]한 후 save 합니다.
[Save] 버튼을 누르고 나면 github의 원격 저장소와 연결된 "origin"이 추가된 것을 확인할 수 있습니다.

* fetch
github 원격 저장소에 변경된 내용을 내 로컬 저장소로 다운로드하는 것.

pull을 하면 자동으로 원격 저장소의 파일을 내려받고 이상이 없는 경우 merge까지 자동으로 합니다. 그러나 우리는 따로 작업하기로 했기 때문에 원격지의 정보를 내려받는 작업을 먼저 할 것입니다.

이미 원격지에 readme.md 파일을 작성해서 저장해 놓았기 때문에 원격지에 있는 파일을 내 로컬로 다운로드해서 동일하게 머지까지 해 놓아야 합니다.

"Git Repositories" view에서 리모트의 “origin”을 선택하고 확장하면 두 개의 목록이 표시됩니다. 자세히 보시면 하나는 구름에서 아래 방향 화살표가 있고, 하나는 구름으로 위 방향 화살표가 있는 것을 볼 수 있습니다. 아이콘 참 잘 만들었죠? 구름에서 아래 방향 화살표 있는 것이 원격지에서 로컬로 다운로드하겠다는 의미겠죠? 아이콘 오른쪽 버튼을 눌러 단축메뉴를 나타낸 후 [Configure Fetch]를 선택합니다.

==============
git
	Remotes
		origin
			https://github.com/imshallah/glade 
			우클릭 Configure Fetch..
대화상자 - [Add] adding a Refspec for Fetch		
			Source : m (master branch)
			next / finish
			[Save and Fetch]
			

====git clone===

(git clone 하는 법 : 불러오고싶은 코드 불러오는 법)
1. 일단 바탕화면이나 아무 곳에 폴더 하나를 만듬
2. 그 폴더에 우클릭해서 git bash 들어가기 (mac이라면 터미널에서 폴더 경로 찾아서 들어가게하기 cd 사용해서 폴더이름 쓰면 됨)
3. git bash 혹은 터미널이 뜨면 git clone 내가 클론하고싶은 깃허브 레퍼지토리 주소 작성
4. 끝

====team project 순서======

1.Create a Repository

2.Create a Branch

switch branches/tags
:feature

Click the drop down at the top of the file list that says branch: main.
Type a branch name, readme-edits, into the new branch text box.
Select the blue Create branch box or hit “Enter” on your keyboard.

3.Make a Commit
원하는 파일 열고... pencil edit mode : 수정
[commit changes] click
These changes will be made to just the README file on your [readme-edits] branch, so now this branch contains content that’s different from [main].

4.Open a Pull Request
<code> ...	<pull request> ... [New pull request]
When you open a pull request, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.

In the Example Comparisons box, select the branch you made, readme-edits, to compare with main (the original).

Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.

When you’re satisfied that these are the changes you want to submit, click the big green 

[Create Pull Request] button.


5.Merge Pull Request
In this final step, it’s time to bring your changes together – merging your readme-edits branch into the main branch.
[Merge Pull Request]
Click [Confirm merge]
[Delete branch]

===GitHub Pages _ 깃허브로 호스팅하기====
private 은 안되고, 하려면 pro 로 돈 4 달러 4000/월 내야 하는 구나. public 은 가능.

내가 만든 웹페이지를 호스팅해주는 여러 업체들이 있다.
무료로 호스팅해주는 업체들도 여러 곳 있지만,
Github를 사용하고 있다면 굳이 다른 곳들을 이용할 필요가 없다.
깃허브에도 호스팅 기능이 있기 때문!

호스팅이란 웹페이지를 올릴 인터넷 상의 공간(서버)를 임대해주는 것을 말한다.


깃허브 레파지토리에서 Settings를 누른다. <> Code 라인 우측 끝.
Settings에서 스크롤을 내리면 GitHub Pages라는 곳이 있다.

https://blog.naver.com/ggapsong/222143735222
source : branch:master 선택. save.
domain 를 샀다면 custom domain 에 내가 산 도메인명 적고 save.

아직 활성화시키지 않았다면 아마 아래 화면과 같은 모습일 것이다.
여기서 None을 클릭해 branch를 master로 선택해준다.
만약 여러 브런치들을 사용해 개발중이라면, 원하는 브런치를 선택해주면 된다.

선택한 이후의 모습.
초록박스 안의 주소로 들어갈 수 있다.
내가 만든 웹페이지를 다른 사람들에게 보여주고 싶다면, 저 주소를 알려주면 된다.
GitHub Pages의 주소는 이런 형태로 이루어져있다.
https://{github ID}.github.io/{레파지토리 이름}/
https://imshallah/github.io/glade

레파지토리에서 오른쪽을 확인해보면 github-pages가 활성화되어 있는 것을 볼 수 있다.
여기를 눌러서도 들어갈 수 있고, 
아까 전에 published되었다고 알려준 주소로도 바로 들어갈 수 있다. :)
여기를 눌러서 들어간다면,
pages를 사용한 이후의 변화과정 또한 확인할 수 있다.
(커밋할때마다 업데이트된다.)

하지만 리액트를 사용해 만들었다면?
다른 라이브러리를 깔아줘야한다.
아니면 Readme파일이 화면에 뜬다.
(리드미 파일을 마주대할 때의 당황스러움이란...)
git-pages 를 사용하자.

터미널에   
npm install gh-pages --save-dav  입력
install대신 약어인 i를 입력해도된다. 
package.json에 들어가서 다음 세가지를 적어준다.

scripts 안에
"predeploy": "npm run build",
"deploy": "gh-pages -d build"
제일 마지막에
"homepage": "https://{github ID}.github.io/{레파지토리이름}/

홈페이지 주소는 아까 github pages에서 자동으로 만들어주는 그 주소이다.
세팅 설정을 하고나서 깔아도 되고, 세팅설정 바로 주소를 적어줘도 된다.

predeploy는 deploy가 실행되기 전에 자동으로 실행된다.

터미널에
npm run deploy
입력!
그럼 자동으로 git-pages가 활성화된다.

만약 이렇게 했는데도 reame 파일이 뜬다면, Branch를 gh-pages로 바꿔주자.

github pages의 장점이라면
코드 변경이 있을 때마다 따로 관리해주지 않아도 된다는 점.
공부하는 입장으로서,
커밋으로 한번에 해결되니 다른 웹포스팅 업체를 이용할 때보다 편하다.

/////내 주소/////

https://github.com/imshallah

https://github.com/imshallah/glade

